/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict authorization model focused on data ownership and access control.
 *
 * Data Structure:
 * - Vendors: /vendors/{vendorId} - Represents a business or vendor.
 * - Listings: /vendors/{vendorId}/listings/{listingId} - Listings offered by a vendor.
 * - Forum: /forumThreads/{threadId} - Public forum threads and their posts.
 * - Community Events: /communityEvents/{eventId} - Public community event information.
 * - Communication Channels: /comm_channels/{channelId} - Private channels between buyers and vendors for orders.
 * - Users: Implicit user documents managed by Firebase Auth.
 *
 * Key Security Decisions:
 * - Vendors can only manage their own listings.
 * - Forum threads and community events are publicly readable.
 * - Communication channels are restricted to the buyer and vendor involved in the order.
 * - User listing is disallowed.
 * - Data schema validation is relaxed to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - Ownership: The `vendorId` field in Listings and Orders is used for authorization, avoiding costly `get()` calls to the `/vendors` collection.
 * - Communication Channels: The `buyerId` and `vendorId` fields in the `CommunicationChannel` document are used to authorize access to messages.
 *
 * Structural Segregation:
 * - No explicit segregation of public vs. private data is defined in this configuration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to business documents based on ownership.
     * @path /vendors/{vendorId}
     * @allow (get, list): Anyone can read vendor profiles.
     * @allow (create): No direct creation; vendor status is likely updated via a backend function.
     * @allow (update, delete): No direct updates or deletes. Likely only allowed via backend function by an admin.
     * @principle Read-only access for public vendor information; admin-controlled vendor lifecycle.
     */
    match /vendors/{vendorId} {
      allow get, list: if true;
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Manages access to listings based on vendor ownership.
     * @path /vendors/{vendorId}/listings/{listingId}
     * @allow (get, list): Anyone can read listings.
     * @allow (create): A vendor can create a listing under their ID.
     * @allow (update, delete): A vendor can update or delete their own listings.
     * @deny (create, update, delete): Other users cannot modify a vendor's listings.
     * @principle Enforces vendor ownership for managing listings.
     */
    match /vendors/{vendorId}/listings/{listingId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == vendorId;
      allow update, delete: if isSignedIn() && request.auth.uid == vendorId;
    }

      /**
       * @description Manages access to orders based on vendor and buyer.
       * @path /vendors/{vendorId}/orders/{orderId}
       * @allow (get, list): No one can read orders.
       * @allow (create): No one can create orders.
       * @allow (update, delete): No one can update or delete orders.
       * @principle Orders should be managed by backend functions.
       */
      match /vendors/{vendorId}/orders/{orderId} {
        allow get, list: if false;
        allow create: if false;
        allow update, delete: if false;
      }

      /**
       * @description Manages access to reviews for vendors.
       * @path /vendors/{vendorId}/reviews/{reviewId}
       * @allow (get, list): Anyone can read reviews.
       * @allow (create): No one can create reviews.
       * @allow (update, delete): No one can update or delete reviews.
       * @principle Reviews can be managed by backend functions.
       */
       match /vendors/{vendorId}/reviews/{reviewId} {
            allow get, list: if true;
            allow create: if false;
            allow update, delete: if false;
       }

       /**
        * @description Manages refund requests for vendors.
        * @path /vendors/{vendorId}/refund_requests/{requestId}
        * @allow (get, list): No one can read refund requests.
        * @allow (create): No one can create refund requests.
        * @allow (update, delete): No one can update or delete refund requests.
        * @principle Refund requests can be managed by backend functions.
        */
       match /vendors/{vendorId}/refund_requests/{requestId} {
            allow get, list: if false;
            allow create: if false;
            allow update, delete: if false;
       }

    /**
     * @description Allows public read access to forum threads.
     * @path /forumThreads/{threadId}
     * @allow (get, list): Anyone can read forum threads.
     * @allow (create, update, delete): No one can write forum threads.
     * @principle Public read access for all users.
     */
    match /forumThreads/{threadId} {
      allow get, list: if true;
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Allows public read access to forum posts within a thread.
     * @path /forumThreads/{threadId}/posts/{postId}
     * @allow (get, list): Anyone can read forum posts.
     * @allow (create, update, delete): No one can write forum posts.
     * @principle Public read access for all users.
     */
    match /forumThreads/{threadId}/posts/{postId} {
      allow get, list: if true;
      allow create: if false;
      allow update, delete: if false;
    }

        /**
         * @description Allows public read access to community events.
         * @path /communityEvents/{eventId}
         * @allow (get, list): Anyone can read community events.
         * @allow (create, update, delete): No one can write community events.
         * @principle Public read access for all users.
         */
        match /communityEvents/{eventId} {
          allow get, list: if true;
          allow create: if false;
          allow update, delete: if false;
        }

    /**
     * @description Manages access to communication channels between buyers and vendors.
     * @path /comm_channels/{channelId}
     * @allow (get): Only the buyer or vendor involved in the channel can read it.
     * @allow (list): No one can list communication channels.
     * @allow (create): Only the buyer or vendor involved in the channel can create communication channels.
     * @allow (update, delete): No one can update or delete communication channels.
     * @principle Restricts access to communication channels to authorized participants.
     */
    match /comm_channels/{channelId} {
      allow get: if isSignedIn() && (resource.data.buyerId == request.auth.uid || resource.data.vendorId == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn() && (request.resource.data.buyerId == request.auth.uid || request.resource.data.vendorId == request.auth.uid);
      allow update, delete: if false;
    }

    /**
     * @description Manages access to messages within a communication channel.
     * @path /comm_channels/{channelId}/messages/{messageId}
     * @allow (get, list): Only the buyer or vendor involved in the channel can read messages.
     * @allow (create): Only the buyer or vendor involved in the channel can create messages.
     * @allow (update, delete): No one can update or delete messages.
     * @principle Restricts message access to authorized participants in the channel.
     */
    match /comm_channels/{channelId}/messages/{messageId} {
      allow get, list: if isSignedIn() && (get(/databases/$(database)/documents/comm_channels/$(channelId)).data.buyerId == request.auth.uid || get(/databases/$(database)/documents/comm_channels/$(channelId)).data.vendorId == request.auth.uid);
      allow create: if isSignedIn() && (get(/databases/$(database)/documents/comm_channels/$(channelId)).data.buyerId == request.auth.uid || get(/databases/$(database)/documents/comm_channels/$(channelId)).data.vendorId == request.auth.uid);
      allow update, delete: if false;
    }

     /**
      * @description Allows read access to legal agreement documents.
      * @path /agreements/{agreementId}
      * @allow (get, list): Anyone can read agreement documents.
      * @allow (create, update, delete): No one can write agreement documents.
      * @principle Public read access for all users.
      */
     match /agreements/{agreementId} {
       allow get, list: if true;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
     }

    /**
     * @description Allows access to consent records.
     * @path /consents/{consentId}
     * @allow (get, list): No one can read consent records.
     * @allow (create): No one can create consent records.
     * @allow (update, delete): No one can update or delete consent records.
     * @principle Consents should be managed by backend functions.
     */
    match /consents/{consentId} {
        allow get, list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows access to dispute records.
     * @path /disputes/{disputeId}
     * @allow (get, list): No one can read dispute records.
     * @allow (create): No one can create dispute records.
     * @allow (update, delete): No one can update or delete dispute records.
     * @principle Disputes should be managed by backend functions.
     */
    match /disputes/{disputeId} {
        allow get, list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

     /**
      * @description Logs all incoming webhook events for auditing.
      * @path /logs/webhooks/events/{eventId}
      * @allow (get, list): No one can read webhook event logs.
      * @allow (create): No one can create webhook event logs.
      * @allow (update, delete): No one can update or delete webhook event logs.
      * @principle Webhook event logs can only be created via server-side functions.
      */
     match /logs/webhooks/events/{eventId} {
       allow get, list: if false;
       allow create: if true;
       allow update: if false;
       allow delete: if false;
     }

     /**
      * @description Logs all outgoing transactional emails for auditing.
      * @path /logs/emails/sends/{sendId}
      * @allow (get, list): No one can read email send logs.
      * @allow (create): No one can create email send logs.
      * @allow (update, delete): No one can update or delete email send logs.
      * @principle Email send logs can only be created via server-side functions.
      */
     match /logs/emails/sends/{sendId} {
       allow get, list: if false;
       allow create: if true;
       allow update: if false;
       allow delete: if false;
     }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isVendor(vendorId) {
        return request.auth.uid == vendorId;
    }

    function isExistingVendor(vendorId) {
        return isVendor(vendorId) && resource != null;
    }

    function isBuyer(buyerId) {
        return request.auth.uid == buyerId;
    }
  }
}