/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and vendor data.
 *  Listings and orders are scoped to vendors and accessible only by the owning vendor.
 *  Forum threads, posts, and community events are publicly readable but not writable by clients.
 * @data_structure
 *  - /vendors/{vendorId}: Vendor profiles, secured via ownership.
 *  - /vendors/{vendorId}/listings/{listingId}: Listings owned by a vendor, secured via vendor ownership.
 *  - /vendors/{vendorId}/orders/{orderId}: Orders for a vendor's listings, secured via vendor ownership.
 *  - /residents/{residentId}: Resident profiles, secured via ownership.
 *  - /forumThreads/{threadId}: Public forum threads.
 *  - /forumThreads/{threadId}/posts/{postId}: Public forum posts within a thread.
 *  - /communityEvents/{eventId}: Public community events.
 * @key_security_decisions
 *  - Listing and order data is strictly namespaced under vendors and secured via vendor ownership, avoiding get() calls
 *  - Forum threads, posts and community events are publicly readable. Clients cannot create, update or delete.
 *  - User listing is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure vendor profiles. Only the vendor can read/write their own profile.
     * @path /vendors/{vendorId}
     * @allow (read) A vendor with UID 'vendor123' can read /vendors/vendor123.
     * @allow (create) A vendor with UID 'vendor123' can create /vendors/vendor123.
     * @deny (read) A vendor with UID 'vendor456' cannot read /vendors/vendor123.
     * @deny (create) A resident cannot create a vendor profile.
     * @principle Enforces document ownership for writes.
     */
    match /vendors/{vendorId} {
      function isOwner(vendorId) {
        return request.auth.uid == vendorId;
      }
      function isExistingOwner(vendorId) {
        return isOwner(vendorId) && resource != null;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(vendorId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(vendorId);
      allow update: if isExistingOwner(vendorId);
      allow delete: if isExistingOwner(vendorId);
    }

    /**
     * @description Secure listings under a vendor. Only the owning vendor can manage their listings.
     * @path /vendors/{vendorId}/listings/{listingId}
     * @allow (read) A vendor with UID 'vendor123' can read /vendors/vendor123/listings/listing001.
     * @allow (create) A vendor with UID 'vendor123' can create /vendors/vendor123/listings/listing001.
     * @deny (read) A vendor with UID 'vendor456' cannot read /vendors/vendor123/listings/listing001.
     * @deny (create) A resident cannot create a listing for a vendor.
     * @principle Enforces resource-based ownership using the vendorId path.
     */
    match /vendors/{vendorId}/listings/{listingId} {
      function isOwner(vendorId) {
        return request.auth.uid == vendorId;
      }
      function isExistingOwner(vendorId) {
        return isOwner(vendorId) && resource != null;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(vendorId);
      allow list: if isOwner(vendorId);
      allow create: if isSignedIn() && isOwner(vendorId);
      allow update: if isExistingOwner(vendorId);
      allow delete: if isExistingOwner(vendorId);
    }

      /**
       * @description Secure orders under a vendor. Only the owning vendor can manage their orders.
       * @path /vendors/{vendorId}/orders/{orderId}
       * @allow (read) A vendor with UID 'vendor123' can read /vendors/vendor123/orders/order001.
       * @allow (create) A vendor with UID 'vendor123' can create /vendors/vendor123/orders/order001.
       * @deny (read) A vendor with UID 'vendor456' cannot read /vendors/vendor123/orders/order001.
       * @deny (create) A resident cannot create an order for a vendor.
       * @principle Enforces resource-based ownership using the vendorId path.
       */
    match /vendors/{vendorId}/orders/{orderId} {
        function isOwner(vendorId) {
          return request.auth.uid == vendorId;
        }
        function isExistingOwner(vendorId) {
          return isOwner(vendorId) && resource != null;
        }
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isOwner(vendorId);
        allow list: if isOwner(vendorId);
        allow create: if isSignedIn() && isOwner(vendorId);
        allow update: if isExistingOwner(vendorId);
        allow delete: if isExistingOwner(vendorId);
      }

    /**
     * @description Secure resident profiles. Only the resident can read/write their own profile.
     * @path /residents/{residentId}
     * @allow (read) A resident with UID 'resident123' can read /residents/resident123.
     * @allow (create) A resident with UID 'resident123' can create /residents/resident123.
     * @deny (read) A resident with UID 'resident456' cannot read /residents/resident123.
     * @deny (create) A vendor cannot create a resident profile.
     * @principle Enforces document ownership for writes.
     */
    match /residents/{residentId} {
      function isOwner(residentId) {
        return request.auth.uid == residentId;
      }
      function isExistingOwner(residentId) {
        return isOwner(residentId) && resource != null;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(residentId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(residentId);
      allow update: if isExistingOwner(residentId);
      allow delete: if isExistingOwner(residentId);
    }

    /**
     * @description Allows public read-only access to forum threads.
     * @path /forumThreads/{threadId}
     * @allow (read) Anyone can read forum threads.
     * @deny (create) No one can create forum threads via client; only backend.
     * @principle Allows public read access, restricts writes to backend only.
     */
    match /forumThreads/{threadId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read-only access to forum posts within a thread.
     * @path /forumThreads/{threadId}/posts/{postId}
     * @allow (read) Anyone can read forum posts.
     * @deny (create) No one can create forum posts via client; only backend.
     * @principle Allows public read access, restricts writes to backend only.
     */
    match /forumThreads/{threadId}/posts/{postId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read-only access to community events.
     * @path /communityEvents/{eventId}
     * @allow (read) Anyone can read community events.
     * @deny (create) No one can create community events via client; only backend.
     * @principle Allows public read access, restricts writes to backend only.
     */
    match /communityEvents/{eventId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}