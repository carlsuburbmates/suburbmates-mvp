/**
 * @file Firebase Security Rules for the application.
 *
 * @core_philosophy This ruleset prioritizes security by enforcing strict access control based on user roles and ownership.
 *   It is configured to allow rapid prototyping by skipping data validation except for fields that are required for authorization.
 *   The design denormalizes data where appropriate to avoid expensive `get()` operations in security rules.
 *
 * @data_structure
 *   /vendors/{vendorId}: Stores vendor profiles.
 *   /vendors/{vendorId}/listings/{listingId}: Stores listings associated with a specific vendor.
 *   /vendors/{vendorId}/orders/{orderId}: Stores orders associated with a specific vendor.
 *   /residents/{residentId}: Stores resident user profiles.
 *   /forumThreads/{threadId}: Stores forum discussion threads.
 *   /forumThreads/{threadId}/posts/{postId}: Stores individual posts within a forum thread.
 *   /communityEvents/{eventId}: Stores community event information.
 *
 * @key_security_decisions
 *   - Vendors and residents can only read and write their own profiles and associated data.
 *   - Public read access is enabled for community events.
 *   - Forum threads and posts are publicly readable, but write access is not defined in the provided schema and is thus denied.
 *   - Data validation is skipped except for auth checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure vendor profiles. Vendors can only read and write their own profiles.
     * @path /vendors/{vendorId}
     * @allow (get, update, delete) - Authenticated vendor can access their own profile.
     *   request.auth.uid == vendorId
     * @allow (create) - Authenticated vendor can create their profile where ID matches their UID.
     *   request.auth.uid == vendorId
     * @allow (list) - Listing vendors is not allowed
     *   false
     * @deny (get, update, delete) - Non-authenticated user.
     *   request.auth == null
     * @deny (create) - Non-authenticated user.
     *   request.auth == null
     * @principle Enforces document ownership for vendors.
     */
    match /vendors/{vendorId} {
      function isOwner(vendorId) {
        return request.auth != null && request.auth.uid == vendorId;
      }
      allow get: if isOwner(vendorId);
      allow list: if false;
      allow create: if isOwner(vendorId);
      allow update: if isOwner(vendorId) && resource != null;
      allow delete: if isOwner(vendorId) && resource != null;
    }

    /**
     * @description Secure listings for vendors. Vendors can only manage their own listings.
     * @path /vendors/{vendorId}/listings/{listingId}
     * @allow (get, list, create, update, delete) - Authenticated vendor can manage listings under their profile.
     *   request.auth.uid == vendorId
     * @deny (get, list, create, update, delete) - Non-authenticated user.
     *   request.auth == null
     * @principle Enforces document ownership for vendor listings.
     */
    match /vendors/{vendorId}/listings/{listingId} {
      function isOwner(vendorId) {
        return request.auth != null && request.auth.uid == vendorId;
      }
      allow get: if isOwner(vendorId);
      allow list: if isOwner(vendorId);
      allow create: if isOwner(vendorId);
      allow update: if isOwner(vendorId) && resource != null;
      allow delete: if isOwner(vendorId) && resource != null;
    }

        /**
         * @description Secure orders for vendors. Vendors can only manage their own orders.
         * @path /vendors/{vendorId}/orders/{orderId}
         * @allow (get, list, create, update, delete) - Authenticated vendor can manage orders under their profile.
         *   request.auth.uid == vendorId
         * @deny (get, list, create, update, delete) - Non-authenticated user.
         *   request.auth == null
         * @principle Enforces document ownership for vendor orders.
         */
    match /vendors/{vendorId}/orders/{orderId} {
        function isOwner(vendorId) {
            return request.auth != null && request.auth.uid == vendorId;
        }
        allow get: if isOwner(vendorId);
        allow list: if isOwner(vendorId);
        allow create: if isOwner(vendorId);
        allow update: if isOwner(vendorId) && resource != null;
        allow delete: if isOwner(vendorId) && resource != null;
    }

    /**
     * @description Secure resident profiles. Residents can only read and write their own profiles.
     * @path /residents/{residentId}
     * @allow (get, update, delete) - Authenticated resident can access their own profile.
     *   request.auth.uid == residentId
     * @allow (create) - Authenticated resident can create their profile where ID matches their UID.
     *   request.auth.uid == residentId
     * @allow (list) - Listing residents is not allowed.
     *   false
     * @deny (get, update, delete) - Non-authenticated user.
     *   request.auth == null
     * @deny (create) - Non-authenticated user.
     *   request.auth == null
     * @principle Enforces document ownership for residents.
     */
    match /residents/{residentId} {
      function isOwner(residentId) {
        return request.auth != null && request.auth.uid == residentId;
      }
      allow get: if isOwner(residentId);
      allow list: if false;
      allow create: if isOwner(residentId);
      allow update: if isOwner(residentId) && resource != null;
      allow delete: if isOwner(residentId) && resource != null;
    }

    /**
     * @description Secure forum threads. Forum threads are publicly readable.
     * @path /forumThreads/{threadId}
     * @allow (get, list) - Anyone can read forum threads.
     *   true
     * @deny (create, update, delete) - No write permissions are defined.
     *   true
     * @principle Allows public read access to forum threads.
     */
    match /forumThreads/{threadId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure forum posts. Forum posts are publicly readable.
     * @path /forumThreads/{threadId}/posts/{postId}
     * @allow (get, list) - Anyone can read forum posts.
     *   true
     * @deny (create, update, delete) - No write permissions are defined.
     *   true
     * @principle Allows public read access to forum posts.
     */
    match /forumThreads/{threadId}/posts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

      /**
       * @description Secure community events. Community events are publicly readable.
       * @path /communityEvents/{eventId}
       * @allow (get, list) - Anyone can read community events.
       *   true
       * @deny (create, update, delete) - Writes are not allowed. // TODO: Add owner validation once the schema is updated with an ownership field.
       *   true
       * @principle Allows public read access to community events, write access is not defined
       */
    match /communityEvents/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}