/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control.
 * Users can only access their own data in designated user-specific collections.
 * Public data is explicitly marked as such. Schema validation is relaxed for
 * prototyping but authorization and relational integrity are strictly enforced.
 *
 * Data Structure:
 * - /vendors/{vendorId}: Stores vendor profiles.
 * - /vendors/{vendorId}/listings/{listingId}: Stores listings for each vendor.
 * - /vendors/{vendorId}/orders/{orderId}: Stores orders for each vendor.
 * - /residents/{residentId}: Stores resident profiles.
 * - /forumThreads/{threadId}: Stores forum threads.
 * - /forumThreads/{threadId}/posts/{postId}: Stores forum posts for each thread.
 * - /communityEvents/{eventId}: Stores community events.
 *
 * Key Security Decisions:
 * - Vendor listing is public but creating, updating, and deleting is restricted to the Vendor owner
 * - Residents profile is public but creation is restricted to the user with a valid auth.uid. Updating and deleting is restricted to the Resident owner
 * - No user listing is allowed for residents or vendors.
 * - Orders are private and only accessible by the vendor
 * - Forum threads and community events are public.
 *
 * Denormalization for Authorization:
 *  None used currently.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to the vendors collection, and write access to only the vendor user.
     * @path /vendors/{vendorId}
     * @allow (get, list): Any user can read vendor data.
     * @allow (create): A vendor can create their profile if the ID matches their auth.uid.
     * @allow (update, delete): Only the vendor can update/delete their own profile.
     * @deny (create): A vendor cannot create a profile with an ID that does not match their auth.uid.
     * @deny (update, delete): A user cannot modify or delete a vendor profile that is not theirs.
     * @principle Allows public reads but restricts writes to the owner.
     */
    match /vendors/{vendorId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == vendorId;
      allow update: if isSignedIn() && isExistingOwner(vendorId);
      allow delete: if isSignedIn() && isExistingOwner(vendorId);
    }

    /**
     * @description Allows read-only access to the vendor listings collection, and write access to only the vendor owner.
     * @path /vendors/{vendorId}/listings/{listingId}
     * @allow (get, list): Any user can read listing data.
     * @allow (create): A vendor can create a listing if they own the vendor profile.
     * @allow (update, delete): Only the vendor can update/delete their own listing.
     * @deny (create): A vendor cannot create a listing if they don't own the vendor profile.
     * @deny (update, delete): A user cannot modify or delete a listing that is not owned by them.
     * @principle Allows public reads but restricts writes to the owner.
     */
    match /vendors/{vendorId}/listings/{listingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(vendorId);
      allow update: if isSignedIn() && isExistingOwner(vendorId);
      allow delete: if isSignedIn() && isExistingOwner(vendorId);
    }

    /**
     * @description Allows read and write access to the vendor orders collection to the vendor owner only.
     * @path /vendors/{vendorId}/orders/{orderId}
     * @allow (get): A vendor can get orders if they own the vendor profile.
     * @allow (list): A vendor can list orders if they own the vendor profile.
     * @allow (create): A vendor can create an order if they own the vendor profile.
     * @allow (update, delete): Only the vendor can update/delete their own order.
     * @deny (get, list, create): A vendor cannot read orders if they don't own the vendor profile.
     * @deny (update, delete): A user cannot modify or delete an order that is not owned by them.
     * @principle Enforces document ownership for writes and reads.
     */
    match /vendors/{vendorId}/orders/{orderId} {
      allow get: if isSignedIn() && isOwner(vendorId);
      allow list: if isSignedIn() && isOwner(vendorId);
      allow create: if isSignedIn() && isOwner(vendorId);
      allow update: if isSignedIn() && isExistingOwner(vendorId);
      allow delete: if isSignedIn() && isExistingOwner(vendorId);
    }

    /**
     * @description Allows read-only access to the residents collection, and write access to only the resident user.
     * @path /residents/{residentId}
     * @allow (get): Any user can read resident data.
     * @allow (create): A resident can create their profile if the ID matches their auth.uid.
     * @allow (update, delete): Only the resident can update/delete their own profile.
     * @deny (create): A resident cannot create a profile with an ID that does not match their auth.uid.
     * @deny (update, delete): A user cannot modify or delete a resident profile that is not theirs.
     * @principle Allows public reads but restricts writes to the owner.
     */
    match /residents/{residentId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == residentId;
      allow update: if isSignedIn() && isExistingOwner(residentId);
      allow delete: if isSignedIn() && isExistingOwner(residentId);
    }

    /**
     * @description Allows read-only access to the forum threads collection.
     * @path /forumThreads/{threadId}
     * @allow (get, list): Any user can read forum thread data.
     * @deny (create, update, delete): No user can create, modify, or delete forum threads.
     * @principle Allows public reads but disallows any writes.
     */
    match /forumThreads/{threadId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read-only access to the forum posts collection.
     * @path /forumThreads/{threadId}/posts/{postId}
     * @allow (get, list): Any user can read forum post data.
     * @deny (create, update, delete): No user can create, modify, or delete forum posts.
     * @principle Allows public reads but disallows any writes.
     */
    match /forumThreads/{threadId}/posts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read-only access to the community events collection.
     * @path /communityEvents/{eventId}
     * @allow (get, list): Any user can read community event data.
     * @deny (create, update, delete): No user can create, modify, or delete community events.
     * @principle Allows public reads but disallows any writes.
     */
    match /communityEvents/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}