/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for vendors and residents, 
 * allowing users to manage their own data. Forum threads, posts, and community events
 * are publicly readable but not writable directly by end users, likely managed
 * by admins or backend functions. Vendor's listings and orders are secured and
 * owned by specific vendors.
 *
 * Data Structure:
 * - /vendors/{vendorId}: Vendor profiles.
 * - /vendors/{vendorId}/listings/{listingId}: Listings owned by a vendor.
 * - /vendors/{vendorId}/orders/{orderId}: Orders placed for a vendor's listings.
 * - /residents/{residentId}: Resident user profiles.
 * - /forumThreads/{threadId}: Forum discussion threads.
 * - /forumThreads/{threadId}/posts/{postId}: Posts within a forum thread.
 * - /communityEvents/{eventId}: Community events.
 *
 * Key Security Decisions:
 * - Residents and Vendors can only manage their own profiles and listings.
 * - Listing creation/modification/deletion is restricted to the vendor who owns the listing.
 * - Forum threads, posts and community events are publicly readable.
 * - Orders are secured and only accessible to vendors.
 *
 * Denormalization for Authorization:
 * - The listings documents contain the vendorId field, which will be used to authorize vendor-specific access to listings.
 * - The order documents are associated to a particular vendor.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows vendors to manage their own profile data.
     * @path /vendors/{vendorId}
     * @allow (create) - Vendor with ID 'vendor123' creates their profile if authenticated as 'vendor123'.
     * @allow (update) - Vendor with ID 'vendor123' updates their profile if authenticated as 'vendor123'.
     * @allow (delete) - Vendor with ID 'vendor123' deletes their profile if authenticated as 'vendor123'.
     * @deny (create) - Vendor with ID 'vendor123' attempts to create a profile for 'vendor456'.
     * @deny (update) - Vendor with ID 'vendor123' attempts to update the profile of 'vendor456'.
     * @deny (delete) - Vendor with ID 'vendor123' attempts to delete the profile of 'vendor456'.
     * @principle Enforces document ownership for writes.
     */
    match /vendors/{vendorId} {
      // Vendor can only manage their own profile.
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(vendorId);
      allow update: if isSignedIn() && isExistingOwner(vendorId);
      allow delete: if isSignedIn() && isExistingOwner(vendorId);
    }

    /**
     * @description Allows vendors to manage their own listings.
     * @path /vendors/{vendorId}/listings/{listingId}
     * @allow (create) - Vendor with ID 'vendor123' creates a listing under their profile.
     * @allow (update) - Vendor with ID 'vendor123' updates a listing under their profile.
     * @allow (delete) - Vendor with ID 'vendor123' deletes a listing under their profile.
     * @deny (create) - Vendor with ID 'vendor123' attempts to create a listing under the profile of 'vendor456'.
     * @deny (update) - Vendor with ID 'vendor123' attempts to update a listing under the profile of 'vendor456'.
     * @deny (delete) - Vendor with ID 'vendor123' attempts to delete a listing under the profile of 'vendor456'.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /vendors/{vendorId}/listings/{listingId} {
      // Vendor can only manage their own listings.
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isVendorOwner(vendorId) && request.resource.data.vendorId == vendorId;
      allow update: if isSignedIn() && isExistingVendorOwner(vendorId) && resource.data.vendorId == vendorId;
      allow delete: if isSignedIn() && isExistingVendorOwner(vendorId);
    }

    /**
     * @description Allows vendors to manage their own orders.
     * @path /vendors/{vendorId}/orders/{orderId}
     * @allow (create) - Vendor with ID 'vendor123' creates an order under their profile.
     * @allow (update) - Vendor with ID 'vendor123' updates an order under their profile.
     * @allow (delete) - Vendor with ID 'vendor123' deletes an order under their profile.
     * @deny (create) - Vendor with ID 'vendor123' attempts to create an order under the profile of 'vendor456'.
     * @deny (update) - Vendor with ID 'vendor123' attempts to update an order under the profile of 'vendor456'.
     * @deny (delete) - Vendor with ID 'vendor123' attempts to delete an order under the profile of 'vendor456'.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /vendors/{vendorId}/orders/{orderId} {
        allow get: if isSignedIn() && isVendorOwner(vendorId);
        allow list: if isSignedIn() && isVendorOwner(vendorId);
        allow create: if isSignedIn() && isVendorOwner(vendorId);
        allow update: if isSignedIn() && isExistingVendorOwner(vendorId);
        allow delete: if isSignedIn() && isExistingVendorOwner(vendorId);
    }

    /**
     * @description Allows residents to manage their own profile data.
     * @path /residents/{residentId}
     * @allow (create) - Resident with ID 'resident123' creates their profile if authenticated as 'resident123'.
     * @allow (update) - Resident with ID 'resident123' updates their profile if authenticated as 'resident123'.
     * @allow (delete) - Resident with ID 'resident123' deletes their profile if authenticated as 'resident123'.
     * @deny (create) - Resident with ID 'resident123' attempts to create a profile for 'resident456'.
     * @deny (update) - Resident with ID 'resident123' attempts to update the profile of 'resident456'.
     * @deny (delete) - Resident with ID 'resident123' attempts to delete the profile of 'resident456'.
     * @principle Enforces document ownership for writes.
     */
    match /residents/{residentId} {
      // Resident can only manage their own profile.
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(residentId);
      allow update: if isSignedIn() && isExistingOwner(residentId);
      allow delete: if isSignedIn() && isExistingOwner(residentId);
    }

    /**
     * @description Allows public read access to forum threads. Writes are likely handled by a backend or admin.
     * @path /forumThreads/{threadId}
     * @allow (get) - Any user can read a forum thread.
     * @allow (list) - Any user can list forum threads.
     * @deny (create) - No user can create a forum thread directly.
     * @deny (update) - No user can update a forum thread directly.
     * @deny (delete) - No user can delete a forum thread directly.
     * @principle Allows public reads and restricts writes.
     */
    match /forumThreads/{threadId} {
      // Public read, admin/backend write.
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to forum posts within a thread. Writes are likely handled by a backend or admin.
     * @path /forumThreads/{threadId}/posts/{postId}
     * @allow (get) - Any user can read a forum post.
     * @allow (list) - Any user can list forum posts.
     * @deny (create) - No user can create a forum post directly.
     * @deny (update) - No user can update a forum post directly.
     * @deny (delete) - No user can delete a forum post directly.
     * @principle Allows public reads and restricts writes.
     */
    match /forumThreads/{threadId}/posts/{postId} {
      // Public read, admin/backend write.
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to community events. Writes are likely handled by a backend or admin.
     * @path /communityEvents/{eventId}
     * @allow (get) - Any user can read a community event.
     * @allow (list) - Any user can list community events.
     * @deny (create) - No user can create a community event directly.
     * @deny (update) - No user can update a community event directly.
     * @deny (delete) - No user can delete a community event directly.
     * @principle Allows public reads and restricts writes.
     */
    match /communityEvents/{eventId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isVendorOwner(vendorId) {
      return request.auth.uid == vendorId;
  }

  function isExistingVendorOwner(vendorId) {
      return isVendorOwner(vendorId) && resource != null;
  }
}