/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and explicit access control.
 * It is configured to permit rapid prototyping by skipping schema validation.
 *
 * Data Structure:
 * - /vendors/{vendorId}: Stores vendor profiles.
 * - /vendors/{vendorId}/listings/{listingId}: Stores listings associated with a specific vendor.
 * - /residents/{residentId}: Stores resident user profiles.
 * - /forumThreads/{threadId}: Stores forum threads.
 * - /forumThreads/{threadId}/posts/{postId}: Stores posts within a specific forum thread.
 * - /communityEvents/{eventId}: Stores community events.
 *
 * Key Security Decisions:
 * - Vendors and Residents can only manage their own profiles and listings.
 * - Public read access is granted for vendors and events.
 * - Forum threads and posts are publicly accessible for reading.
 * - Listing is secured by the vendor's ID
 *
 * Denormalization for Authorization:
 * - Listings include a `vendorId` field to simplify ownership checks and avoid costly `get()` calls.
 * - No role-based access control is used.  All authorization is based on ownership.
 *
 * Structural Segregation:
 * - Private user data (e.g., profile details) is stored separately from public content (e.g., forum posts, vendor data).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all vendors and write access only to the vendor themselves.
     * @path /vendors/{vendorId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if isSignedIn() && isOwner(vendorId)
     * @deny (create): if !isSignedIn()
     * @deny (update, delete): if !isSignedIn()
     * @principle Allows any user to list vendors but only a logged-in vendor to manage their own data.
     */
    match /vendors/{vendorId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(vendorId);
      allow update: if isSignedIn() && isExistingOwner(vendorId);
      allow delete: if isSignedIn() && isExistingOwner(vendorId);
    }

    /**
     * @description Allows a vendor to manage their own listings.
     * @path /vendors/{vendorId}/listings/{listingId}
     * @allow (get, list): if isSignedIn() && isOwner(vendorId)
     * @allow (create): if isSignedIn() && request.resource.data.vendorId == vendorId
     * @allow (update, delete): if isSignedIn() && isExistingOwnerForListing(vendorId, resource.data.vendorId)
     * @deny (create): if !isSignedIn()
     * @deny (update, delete): if !isSignedIn()
     * @principle Enforces ownership of listings by vendors, preventing cross-vendor modification.
     */
    match /vendors/{vendorId}/listings/{listingId} {
      allow get, list: if isSignedIn() && isOwner(vendorId);
      allow create: if isSignedIn() && request.resource.data.vendorId == vendorId;
      allow update: if isSignedIn() && isExistingOwnerForListing(vendorId, resource.data.vendorId);
      allow delete: if isSignedIn() && isExistingOwnerForListing(vendorId, resource.data.vendorId);
    }

    /**
     * @description Allows a resident to manage their own profile.
     * @path /residents/{residentId}
     * @allow (get, list): if isOwner(residentId)
     * @allow (create): if isSignedIn() && isOwner(residentId)
     * @allow (update, delete): if isSignedIn() && isExistingOwner(residentId)
     * @deny (create): if !isSignedIn()
     * @deny (update, delete): if !isSignedIn()
     * @principle Enforces ownership of resident profiles.
     */
    match /residents/{residentId} {
      allow get, list: if isOwner(residentId);
      allow create: if isSignedIn() && isOwner(residentId);
      allow update: if isSignedIn() && isExistingOwner(residentId);
      allow delete: if isSignedIn() && isExistingOwner(residentId);
    }

    /**
     * @description Allows public read access to forum threads and any authenticated user to create them.
     * @path /forumThreads/{threadId}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if false; // TODO: Determine who can edit/delete threads
     * @deny (create): if !isSignedIn()
     * @principle Public forum threads with restricted modification rights.
     */
    match /forumThreads/{threadId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Determine who can edit/delete threads
    }

    /**
     * @description Allows public read access to forum posts and authenticated users to create them.
     * @path /forumThreads/{threadId}/posts/{postId}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if false; // TODO: Determine who can edit/delete posts
     * @deny (create): if !isSignedIn()
     * @principle Public forum posts with restricted modification rights.
     */
    match /forumThreads/{threadId}/posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Determine who can edit/delete posts
    }

    /**
     * @description Allows public read access to community events.
     * @path /communityEvents/{eventId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if false; // TODO: Define event creation/management permissions
     * @principle Public community events with restricted modification rights.
     */
    match /communityEvents/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Define event creation/management permissions
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource based on the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing resource.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user owns the existing resource, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is the owner of an existing listing.
     * @param {string} expectedVendorId The expected vendor ID.
     * @param {string} actualVendorId The actual vendor ID from the resource.
     * @return {boolean} True if the user owns the existing resource, false otherwise.
     */
    function isExistingOwnerForListing(expectedVendorId, actualVendorId) {
        return isOwner(expectedVendorId) && resource != null && actualVendorId == expectedVendorId;
    }
  }
}